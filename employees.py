"""
Student information for this assignment:

Replace Felix Li with your name.
On my honor, Felix Li, this
programming assignment is my own work and I have not provided this code to
any other student.

I have read and understand the course syllabus's guidelines regarding Academic
Integrity. I understand that if I violate the Academic Integrity policy (e.g.
copy code from someone else, have the code generated by an LLM, or give my
code to someone else), the case shall be submitted to the Office of the Dean of
Students. Academic penalties up to and including an F in the course are likely.

UT EID 1: fl7449
"""

from abc import ABC, abstractmethod
import random

DAILY_EXPENSE = 60
HAPPINESS_THRESHOLD = 50
MANAGER_BONUS = 1000
TEMP_EMPLOYEE_PERFORMANCE_THRESHOLD = 50
PERM_EMPLOYEE_PERFORMANCE_THRESHOLD = 25
RELATIONSHIP_THRESHOLD = 10
INITIAL_PERFORMANCE = 75
INITIAL_HAPPINESS = 50
PERCENTAGE_MAX = 100
PERCENTAGE_MIN = 0
SALARY_ERROR_MESSAGE = "Salary must be non-negative."

class Employee(ABC):
    """
    Abstract base class representing a generic employee in the system.
    """

    def __init__(self, name, manager, salary, savings):
        self.relationships = {}
        self.savings = savings
        self.is_employed = True
        self.__name = name
        self.__manager = manager
        self.performance = INITIAL_PERFORMANCE
        self.happiness = INITIAL_HAPPINESS
        self.salary = salary

    @property
    def name(self):
        "Read-only name"
        return self.__name

    @property
    def manager(self):
        "Read-only manager"
        return self.__manager

    @property
    def performance(self):
        "Performance reader"
        return self._performance

    @performance.setter
    def performance(self, value):
        "Performance setter"
        if value < PERCENTAGE_MIN:
            self._performance = PERCENTAGE_MIN
        elif value > PERCENTAGE_MAX:
            self._performance = PERCENTAGE_MAX
        else:
            self._performance = value

    @property
    def happiness(self):
        "Happiness reader"
        return self._happiness

    @happiness.setter
    def happiness(self, value):
        "Happiness setter"
        if value < PERCENTAGE_MIN:
            self._happiness = PERCENTAGE_MIN
        elif value > PERCENTAGE_MAX:
            self._happiness = PERCENTAGE_MAX
        else:
            self._happiness = value

    @property
    def salary(self):
        "Salary reader"
        return self._salary

    @salary.setter
    def salary(self, value):
        "Salary setter"
        if value < 0:
            raise ValueError(SALARY_ERROR_MESSAGE)
        self._salary = value

    @abstractmethod
    def work(self):
        "Work abstract method"

    def interact(self, other):
        """
        Simulates an interaction between this employee and another employee.
        Modifies the current employee's relationship and happiness based on the interaction.
        """
        if other.name not in self.relationships:
            self.relationships[other.name] = 0
        relationship_value = self.relationships[other.name]
        if relationship_value > RELATIONSHIP_THRESHOLD:
            self.happiness += 1
        elif self.happiness >= HAPPINESS_THRESHOLD and other.happiness >= HAPPINESS_THRESHOLD:
            self.relationships[other.name] += 1
        else:
            self.relationships[other.name] -= 1
            self.happiness -= 1

    def daily_expense(self):
        """
        Simulates the employee’s daily expenses by reducing their happiness and savings.
        """
        self.happiness -= 1
        self.savings -= DAILY_EXPENSE

    def __str__(self):
        """
        Returns a string representation of the employee's current state.
        """
        return (f"{self.name}\n"
        f"\tSalary: ${self.salary}\n"
        f"\tSavings: ${self.savings}\n"
        f"\tHappiness: {self.happiness}%\n"
        f"\tPerformance: {self.performance}%")

class Manager(Employee):
    """
    Represents a manager, which is a type of Employee.
    """
    def work(self):
        """
        Simulates 1 hour of work for the manager.
        Adjusts performance randomly between -5 and 5.
        If performance decreases or stays the same, the manager loses happiness.
        If performance increases, the manager gains happiness.
        """
        performance_change = random.randint(-5, 5)
        self.performance += performance_change
        if performance_change <= 0:
            self.happiness -= 1
            for employee in self.relationships:
                self.relationships[employee] -= 1
        else:
            self.happiness += 1

class TemporaryEmployee(Employee):
    """
    Class representing a temporary employee. Inherits from the Employee class.
    """
    def work(self):
        """
        Simulates 1 hour of work for a temporary employee.
        Performance is randomly adjusted by an integer value between -15 and 15.
        If performance decreases or stays the same, happiness decreases by 2.
        If performance increases, happiness improves by 1.
        """
        performance_change = random.randint(-15, 15)
        self.performance += performance_change
        if performance_change <= 0:
            self.happiness -= 2
        else:
            self.happiness += 1

    def interact(self, other):
        """
        Simulates an interaction between this temporary employee and another employee.
        Calls the interact method from the Employee class and modifies 
        the temporary employee’s happiness and savings.
        """
        super().interact(other)
        if other == self.manager:
            if self.manager.happiness > HAPPINESS_THRESHOLD:
                if self.performance >= TEMP_EMPLOYEE_PERFORMANCE_THRESHOLD:
                    self.savings += MANAGER_BONUS
            else:
                self.salary = self.salary // 2
                self.happiness -= 5
                if self.salary == 0:
                    self.is_employed = False

class PermanentEmployee(Employee):
    """
    Class representing a permanent employee. Inherits from the Employee class.
    """
    def work(self):
        """
        Simulates 1 hour of work for a permanent employee.
        Performance is randomly adjusted by an integer value between -10 and 10.
        If the performance change is greater than or equal to 0, the 
        employee’s happiness increases by 1.
        """
        performance_change = random.randint(-10, 10)
        self.performance += performance_change
        if performance_change >= 0:
            self.happiness += 1

    def interact(self, other):
        """
        Simulates an interaction between this permanent employee and another employee.
        Calls the interact method from the Employee class and modifies the permanent 
        employee’s happiness and savings.
        """
        super().interact(other)
        if other == self.manager:
            if self.manager.happiness > HAPPINESS_THRESHOLD:
                if self.performance > PERM_EMPLOYEE_PERFORMANCE_THRESHOLD:
                    self.savings += MANAGER_BONUS
            else:
                self.happiness -= 1
