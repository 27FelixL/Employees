"""
Student information for this assignment:

Replace Felix Li with your name.
On my honor, Felix Li, this
programming assignment is my own work and I have not provided this code to
any other student.

I have read and understand the course syllabus's guidelines regarding Academic
Integrity. I understand that if I violate the Academic Integrity policy (e.g.
copy code from someone else, have the code generated by an LLM, or give my
code to someone else), the case shall be submitted to the Office of the Dean of
Students. Academic penalties up to and including an F in the course are likely.

UT EID 1: fl7449
"""

from abc import ABC, abstractmethod
import random

DAILY_EXPENSE = 60
HAPPINESS_THRESHOLD = 50
MANAGER_BONUS = 1000
TEMP_EMPLOYEE_PERFORMANCE_THRESHOLD = 50
PERM_EMPLOYEE_PERFORMANCE_THRESHOLD = 25
RELATIONSHIP_THRESHOLD = 10
INITIAL_PERFORMANCE = 75
INITIAL_HAPPINESS = 50
PERCENTAGE_MAX = 100
PERCENTAGE_MIN = 0
SALARY_ERROR_MESSAGE = "Salary must be non-negative."

class Employee(ABC):
    """
    Abstract base class representing a generic employee in the system.
    """

    def __init__(self, name, manager, salary, savings):
        self.relationships = {}
        self.savings = savings
        self.is_employed = True
        self.__name = name
        self.__manager = manager
        self.performance = INITIAL_PERFORMANCE
        self.happiness = INITIAL_HAPPINESS
        self.salary = salary
    
    @property
    def name(self):
        return self.__name

    @property
    def manager(self):
        return self.__manager

    @property
    def performance(self):
        return self._performance

    @performance.setter
    def performance(self, value):
        if value < PERCENTAGE_MIN:
            self._performance = PERCENTAGE_MIN
        elif value > PERCENTAGE_MAX:
            self._performance = PERCENTAGE_MAX
        else:
            self._performance = value

    @property
    def happiness(self):
        return self._happiness

    @happiness.setter
    def happiness(self, value):
        if value < PERCENTAGE_MIN:
            self._happiness = PERCENTAGE_MIN
        elif value > PERCENTAGE_MAX:
            self._happiness = PERCENTAGE_MAX
        else:
            self._happiness = value

    @property
    def salary(self):
        return self._salary

    @salary.setter
    def salary(self, value):
        if value < 0:
            raise ValueError(SALARY_ERROR_MESSAGE)
        self._salary = value

    @abstractmethod
    def work(self):
        pass

    def interact(self, other):
        """
        Simulates an interaction between this employee and another employee.
        Modifies the current employee's relationship and happiness based on the interaction.
        """
        if other.name not in self.relationships:
            self.relationships[other.name] = 0
        relationship_value = self.relationships[other.name]
        if relationship_value > RELATIONSHIP_THRESHOLD:
            self.happiness += 1
        elif self.happiness >= HAPPINESS_THRESHOLD and other.happiness >= HAPPINESS_THRESHOLD:
            self.relationships[other.name] += 1
        else:
            self.relationships[other.name] -= 1
            self.happiness -= 1
    
    def daily_expense(self):
        """
        Simulates the employeeâ€™s daily expenses by reducing their happiness and savings.
        """
        self.happiness -= 1
        self.savings -= DAILY_EXPENSE

    def __str__(self):
        """
        Returns a string representation of the employee's current state.
        """
        return f"{self.name}\n\tSalary: ${self.salary}\n\tSavings: ${self.savings}\n\tHappiness: {self.happiness}%\n\tPerformance: {self.performance}%"

class Manager(Employee):
    """
    Represents a manager, which is a type of Employee.
    """
    def work(self):
        """
        Simulates 1 hour of work for the manager.
        Adjusts performance randomly between -5 and 5.
        If performance decreases or stays the same, the manager loses happiness and relationships worsen.
        If performance increases, the manager gains happiness.
        """
        performance_change = random.randint(-5, 5)
        self.performance += performance_change
        if performance_change <= 0:
            self.happiness -= 1
            for employee in self.relationships:
                self.relationships[employee] -= 1
        else:
            self.happiness += 1
            
class TemporaryEmployee(Employee):
    """
    A subclass of Employee representing a temporary employee.
    """
    HAPPINESS_THRESHOLD = 50
    TEMP_EMPLOYEE_PERFORMANCE_THRESHOLD = 50
    MANAGER_BONUS = 1000
    
    def work(self):
        """
        Simulates 1 hour of work for a temporary employee.
        Adjusts performance randomly between -15 and 15.
        If performance decreases or stays the same, the employee loses 2 happiness.
        If performance increases, the employee gains 1 happiness.
        """
        performance_change = random.randint(-15, 15)
        self.performance += performance_change
        if performance_change <= 0:
            self.happiness -= 2
        else:
            self.happiness += 1

    def interact(self, other):
        super().interact(other)
        if isinstance(other, Employee) and hasattr(other, 'is_manager') and other.is_manager:
            manager = other
            if manager.happiness > self.HAPPINESS_THRESHOLD and self.performance >= self.TEMP_EMPLOYEE_PERFORMANCE_THRESHOLD:
                self.savings += self.MANAGER_BONUS
            if manager.happiness <= self.HAPPINESS_THRESHOLD:
                self.salary = self.salary // 2
                self.happiness -= 5
            if self.salary == 0:
                self.is_employed = False

class PermanentEmployee(Employee):
    """
    A subclass of Employee representing a permanent employee.
    """
    HAPPINESS_THRESHOLD = 50
    PERM_EMPLOYEE_PERFORMANCE_THRESHOLD = 25
    MANAGER_BONUS = 1000
    
    def work(self):
        """
        Simulates 1 hour of work for the permanent employee.
        Adjusts performance by a random value between -10 and 10.
        Increases happiness if the performance change is non-negative.
        """
        performance_change = random.randint(-10, 10)
        self.performance += performance_change
        if performance_change >= 0:
            self.happiness += 1

    def interact(self, other):
        """
        Simulates an interaction between a permanent employee and another employee.
        The interaction first calls the Employee class's interact() method.
        If interacting with their manager, the employee's savings or happiness may be adjusted.
        """
        super().interact(other)
        if isinstance(other, Employee) and getattr(other, 'is_manager', False):
            manager = other
            if manager.happiness > self.HAPPINESS_THRESHOLD and self.performance > self.PERM_EMPLOYEE_PERFORMANCE_THRESHOLD:
                self.savings += self.MANAGER_BONUS
            if manager.happiness <= self.HAPPINESS_THRESHOLD:
                self.happiness -= 1
